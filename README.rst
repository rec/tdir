ðŸ—ƒ tdir - create and fill a temporary directory ðŸ—ƒ
======================================================

Create a temporary directory using tempfile.TemporaryDirectory and then
populate it.

* ``tdir`` is a context manager that runs in a populated temporary directory

* ``tdec`` is a decorator to run functions or test suites in a populated
  temporary directory

* ``fill`` recursively fills a directory (temporary or not)

Handy for unit tests where you want a whole directory full of files fast.

EXAMPLE: to temporarily create a directory structure

.. code-block:: python

    import tdir

    with tdir.tdir(
        'one', 'two', 'three',
        four='two\nlines',
        sub1={
            'six': 'A short file',
            'seven': 'blank lines\n\n\n\n',
            'eight': ['a', 'b', 'c']
    }) as td:
        # Now the directory `td` has files `one`, `two` and `three`, each with
        # one line, file `four` with two lines, and then a subdirectory `sub/`
        # with more files.

EXAMPLE: as a decorator for tests

.. code-block:: python

    from pathlib import Path
    import tdir
    import unittest

    CWD = Path().absolute()


    # Decorate a whole class so each test runs in a new temporary directory
    @tdir('a', foo='bar')
    class MyTest(unittest.TestCast):
        def test_something(self):
            assert Path('a').read_text() = 'a\n'
            assert Path('foo').read_text() = 'bar\n'


    # Decorate single tests
    class MyTest(unittest.TestCast):
        @tdir(foo='bar', baz=bytes(range(4)))
        def test_something(self):
            assert Path('foo').read_text() = 'bar\n'
            assert Path('baz').read_bytes() = bytes(range(4)))

        # Run in an empty temporary directory
        @tdir
        def test_something_else(self):
            assert not Path('a').exists()
            assert Path().absolute() != CWD

API
---

``tdir.tdir(*args, cwd=True, **kwargs)``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(`tdir.py, 78-111 <https://github.com/rec/tdir/blob/master/tdir.py#L78-L111>`_)

A context manager to create and fill a temporary directory.

ARGUMENTS
  args:
    A list of strings or dictionaries.  For strings, a file is created
    with that string as name and contents.  For dictionaries, the contents
    are used to recursively create and fill the directory.

  cwd:
    If true, change the working directory to the temp dir at the start
    of the context and restore the original working directory at the end.

  kwargs:
    A dictionary mapping file or directory names to values.
    If the key's value is a string it is used to file a file of that name.
    If it's a dictionary, its contents are used to recursively create and
    fill a subdirectory.

``tdir.tdec(*args, **kwargs)``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(`tdir.py, 113-170 <https://github.com/rec/tdir/blob/master/tdir.py#L113-L170>`_)

Decorate a function or ``unittest.TestCase`` so it runs in a populated
temporary directory.

If ``tdec()`` has exactly one callable argument, either a function or a
class, ``tdec()`` decorates it to run in an empty temporary directory.

Otherwise, ``tdec()`` returns a decorator which decorates a function or
class to run a temporary directory populated with entries from args and
kwargs/

ARGUMENTS
  args:
    Either a single callable, or a list of strings or dictionaries.
    For strings, a file is created with that string as name and contents.
    For dictionaries, the contents are used to recursively create and
    fill the directory.

  cwd:
    If true, change the working directory to the temp dir at the start
    of the context and restore the original working directory at the end.

  kwargs:
    A dictionary mapping file or directory names to values.
    If the key's value is a string it is used to file a file of that name.
    If it's a dictionary, its contents are used to recursively create and
    fill a subdirectory.

``tdir.fill(root, *args, **kwargs)``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(`tdir.py, 172-220 <https://github.com/rec/tdir/blob/master/tdir.py#L172-L220>`_)

Recursively populate a directory.

ARGUMENTS
  root:
    The root directory to fill

  args:
    A list of strings or dictionaries.  For strings, a file is created
    with that string as name and contents.  For dictionaries, the contents
    are used to recursively create and fill the directory.

  kwargs:
    A dictionary mapping file or directory names to values.
    If the key's value is a string it is used to file a file of that name.
    If it's a dictionary, its contents are used to recursively create and
    fill a subdirectory.

(automatically generated by `doks <https://github.com/rec/doks/>`_ on 2020-06-25T19:19:51.941104)
